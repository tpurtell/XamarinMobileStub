/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file was auto-generated by Doppleganger.
 * Feel free to modify this file as necessary, but any changes
 * may be lost when it is regenerated.
 *
 * See http://code.google.com/p/doppleganger/ for more information.
 */

//from version 6.3

#region

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Xamarin.Media;

#endregion

namespace Xamarin.Contacts
{
    public enum AddressType
    {
        Work
        ,
        Home
        ,
        Other
    }

    public class Address
    {
        public AddressType Type
        {
            get { return AddressType.Work; }
            set { }
        }

        public String Label
        {
            get { return null; }
            set { }
        }

        public String StreetAddress
        {
            get { return null; }
            set { }
        }

        public String City
        {
            get { return null; }
            set { }
        }

        public String Region
        {
            get { return null; }
            set { }
        }

        public String Country
        {
            get { return null; }
            set { }
        }

        public String PostalCode
        {
            get { return null; }
            set { }
        }
    }

    public enum EmailType
    {
        Home
        ,
        Work
        ,
        Other
    }

    public class Email
    {
        public EmailType Type
        {
            get { return EmailType.Home; }
            set { }
        }

        public String Label
        {
            get { return null; }
            set { }
        }

        public String Address
        {
            get { return null; }
            set { }
        }
    }

    public enum InstantMessagingService
    {
        Aim
        ,
        Msn
        ,
        Yahoo
        ,
        Icq
        ,
        Jabber
        ,
        Other
    }

    public class InstantMessagingAccount
    {
        public InstantMessagingService Service
        {
            get { return InstantMessagingService.Aim; }
            set { }
        }

        public String ServiceLabel
        {
            get { return null; }
            set { }
        }

        public String Account
        {
            get { return null; }
            set { }
        }
    }

    public class Note
    {
        public String Contents
        {
            get { return null; }
            set { }
        }
    }

    public enum OrganizationType
    {
        Work
        ,
        Other
    }

    public class Organization
    {
        public OrganizationType Type
        {
            get { return OrganizationType.Work; }
            set { }
        }

        public String Label
        {
            get { return null; }
            set { }
        }

        public String Name
        {
            get { return null; }
            set { }
        }

        public String ContactTitle
        {
            get { return null; }
            set { }
        }
    }

    public enum PhoneType
    {
        Home
        ,
        HomeFax
        ,
        Work
        ,
        WorkFax
        ,
        Pager
        ,
        Mobile
        ,
        Other
    }

    public class Phone
    {
        public PhoneType Type
        {
            get { return PhoneType.Home; }
            set { }
        }

        public String Label
        {
            get { return null; }
            set { }
        }

        public String Number
        {
            get { return null; }
            set { }
        }
    }

    public enum RelationshipType
    {
        SignificantOther
        ,
        Child
        ,
        Other
    }

    public class Relationship
    {
        public String Name
        {
            get { return null; }
            set { }
        }

        public RelationshipType Type
        {
            get { return RelationshipType.SignificantOther; }
            set { }
        }
    }

    public class Website
    {
        public String Address
        {
            get { return null; }
            set { }
        }
    }
}

namespace Xamarin.Media
{
    public class MediaFile : IDisposable
    {
        protected MediaFile()
        {
        }

        public String Path
        {
            get { return null; }
        }

        public virtual void Dispose()
        {
        }

        public Stream GetStream()
        {
            return null;
        }
    }

    public class MediaFileNotFoundException : Exception
    {
        public MediaFileNotFoundException(String param_path)
        {
        }

        public MediaFileNotFoundException(String param_path, Exception param_innerException)
        {
        }

        protected MediaFileNotFoundException()
        {
        }

        public String Path
        {
            get { return null; }
            set { }
        }
    }

    public class StoreMediaOptions
    {
        protected StoreMediaOptions()
        {
        }

        public String Directory
        {
            get { return null; }
            set { }
        }

        public String Name
        {
            get { return null; }
            set { }
        }
    }

    public enum CameraDevice
    {
        Rear
        ,
        Front
    }

    public class StoreCameraMediaOptions : StoreMediaOptions
    {
        public CameraDevice DefaultCamera
        {
            get { return CameraDevice.Rear; }
            set { }
        }
    }

    public enum VideoQuality
    {
        Low
        ,
        Medium
        ,
        High
    }

    public class StoreVideoOptions : StoreCameraMediaOptions
    {
        public TimeSpan DesiredLength
        {
            get { return new TimeSpan(); }
            set { }
        }

        public VideoQuality Quality
        {
            get { return VideoQuality.Low; }
            set { }
        }
    }
}

namespace Xamarin.Geolocation
{
    public class Position
    {
        public Position()
        {
        }

        public Position(Position param_position)
        {
        }

        public DateTimeOffset Timestamp
        {
            get { return new DateTimeOffset(); }
            set { }
        }

        public Double Latitude
        {
            get { return 0; }
            set { }
        }

        public Double Longitude
        {
            get { return 0; }
            set { }
        }

        public Double Altitude
        {
            get { return 0; }
            set { }
        }

        public Double Accuracy
        {
            get { return 0; }
            set { }
        }

        public Double AltitudeAccuracy
        {
            get { return 0; }
            set { }
        }

        public Double Heading
        {
            get { return 0; }
            set { }
        }

        public Double Speed
        {
            get { return 0; }
            set { }
        }
    }

    public class PositionEventArgs : EventArgs
    {
        public PositionEventArgs(Position param_position)
        {
        }

        protected PositionEventArgs()
        {
        }

        public Position Position
        {
            get { return null; }
            set { }
        }
    }

    public class GeolocationException : Exception
    {
        public GeolocationException(GeolocationError param_error)
        {
        }

        public GeolocationException(GeolocationError param_error, Exception param_innerException)
        {
        }

        protected GeolocationException()
        {
        }

        public GeolocationError Error
        {
            get { return GeolocationError.PositionUnavailable; }
            set { }
        }
    }

    public class PositionErrorEventArgs : EventArgs
    {
        public PositionErrorEventArgs(GeolocationError param_error)
        {
        }

        protected PositionErrorEventArgs()
        {
        }

        public GeolocationError Error
        {
            get { return GeolocationError.PositionUnavailable; }
            set { }
        }
    }

    public enum GeolocationError
    {
        PositionUnavailable
        ,
        Unauthorized
    }
}

namespace Xamarin.Contacts
{
    public class AddressBook : IQueryable<Contact>, IQueryable
    {
        public AddressBook(object param_context)
        {
        }

        protected AddressBook()
        {
        }

        public Boolean IsReadOnly
        {
            get { return false; }
        }

        public Boolean SingleContactsSupported
        {
            get { return false; }
        }

        public Boolean AggregateContactsSupported
        {
            get { return false; }
        }

        public Boolean PreferContactAggregation
        {
            get { return false; }
            set { }
        }

        public Boolean LoadSupported
        {
            get { return false; }
        }

        public virtual IEnumerator<Contact> GetEnumerator()
        {
            return null;
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            throw new NotImplementedException();
        }

        public Task<Boolean> RequestPermission()
        {
            return null;
        }

        public Contact Load(String param_id)
        {
            return null;
        }

        IEnumerator<Contact> IEnumerable<Contact>.GetEnumerator()
        {
            throw new NotImplementedException();
        }

        Type IQueryable.ElementType
        {
            get { return null; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return null; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return null; }
        }
    }

    public class Contact
    {
        public String Id
        {
            get { return null; }
            set { }
        }

        public Boolean IsAggregate
        {
            get { return false; }
            set { }
        }

        public String DisplayName
        {
            get { return null; }
            set { }
        }

        public String Prefix
        {
            get { return null; }
            set { }
        }

        public String FirstName
        {
            get { return null; }
            set { }
        }

        public String MiddleName
        {
            get { return null; }
            set { }
        }

        public String LastName
        {
            get { return null; }
            set { }
        }

        public String Nickname
        {
            get { return null; }
            set { }
        }

        public String Suffix
        {
            get { return null; }
            set { }
        }

        public IEnumerable<Relationship> Relationships
        {
            get { return null; }
            set { }
        }

        public IEnumerable<Address> Addresses
        {
            get { return null; }
            set { }
        }

        public IEnumerable<InstantMessagingAccount> InstantMessagingAccounts
        {
            get { return null; }
            set { }
        }

        public IEnumerable<Website> Websites
        {
            get { return null; }
            set { }
        }

        public IEnumerable<Organization> Organizations
        {
            get { return null; }
            set { }
        }

        public IEnumerable<Note> Notes
        {
            get { return null; }
            set { }
        }

        public IEnumerable<Email> Emails
        {
            get { return null; }
            set { }
        }

        public IEnumerable<Phone> Phones
        {
            get { return null; }
            set { }
        }

        public object GetThumbnail()
        {
            return null;
        }

        public Task<MediaFile> SaveThumbnailAsync(String param_path)
        {
            return null;
        }
    }
}

namespace Xamarin.Geolocation
{
    public class Geolocator
    {
        public Geolocator(object param_context)
        {
        }

        protected Geolocator()
        {
        }

        public Boolean IsListening
        {
            get { return false; }
        }

        public Double DesiredAccuracy
        {
            get { return 0; }
            set { }
        }

        public Boolean SupportsHeading
        {
            get { return false; }
        }

        public Boolean IsGeolocationAvailable
        {
            get { return false; }
        }

        public Boolean IsGeolocationEnabled
        {
            get { return false; }
        }
#pragma warning disable 67
        public event EventHandler<PositionErrorEventArgs> PositionError;
#pragma warning disable 67
        public event EventHandler<PositionEventArgs> PositionChanged;

        public Task<Position> GetPositionAsync(CancellationToken param_cancelToken)
        {
            return null;
        }

        public Task<Position> GetPositionAsync(CancellationToken param_cancelToken, Boolean param_includeHeading)
        {
            return null;
        }

        public Task<Position> GetPositionAsync(Int32 param_timeout)
        {
            return null;
        }

        public Task<Position> GetPositionAsync(Int32 param_timeout, Boolean param_includeHeading)
        {
            return null;
        }

        public Task<Position> GetPositionAsync(Int32 param_timeout, CancellationToken param_cancelToken)
        {
            return null;
        }

        public Task<Position> GetPositionAsync(Int32 param_timeout, CancellationToken param_cancelToken,
                                               Boolean param_includeHeading)
        {
            return null;
        }

        public void StartListening(Int32 param_minTime, Double param_minDistance)
        {
        }

        public void StartListening(Int32 param_minTime, Double param_minDistance, Boolean param_includeHeading)
        {
        }

        public void StopListening()
        {
        }
    }
}

namespace Xamarin.Media
{
    public class MediaPicker
    {
        public MediaPicker(object param_context)
        {
        }

        protected MediaPicker()
        {
        }

        public Boolean IsCameraAvailable
        {
            get { return false; }
            set { }
        }

        public Boolean PhotosSupported
        {
            get { return false; }
        }

        public Boolean VideosSupported
        {
            get { return false; }
        }

        public Task<MediaFile> PickPhotoAsync()
        {
            return null;
        }

        public Task<MediaFile> TakePhotoAsync(StoreCameraMediaOptions param_options)
        {
            return null;
        }

        public Task<MediaFile> PickVideoAsync()
        {
            return null;
        }

        public Task<MediaFile> TakeVideoAsync(StoreVideoOptions param_options)
        {
            return null;
        }
    }
}